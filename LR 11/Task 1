#include <iostream>  // Підключаємо стандартну бібліотеку для вводу та виводу даних
using namespace std;  // Використовуємо стандартний простір імен для зручності

// Оголошення структури Date для зберігання годин та хвилин
struct Date {
    int hours;    // Поле для зберігання годин
    int minutes;  // Поле для зберігання хвилин
};

// Функція для коригування часу (годин та хвилин)
void correctTime(Date& time) {
    // Якщо години більше або рівні 24, коригуємо їх, залишаючи залишок від ділення на 24
    if (time.hours >= 24) {
        time.hours = time.hours % 24;  // Залишок від ділення на 24, щоб години не перевищували 24
    }
    // Якщо хвилини більше або рівні 60, коригуємо їх
    if (time.minutes >= 60) {
        time.hours += time.minutes / 60;  // Додаємо до годин кількість годин, отриману з хвилин
        time.minutes = time.minutes % 60;  // Оновлюємо хвилини, залишаючи залишок від ділення на 60
    }
}

// Головна функція програми
int main() {
    Date time;  // Оголошуємо змінну структури Date для зберігання часу
    int additionalMinutes;  // Змінна для кількості хвилин, які потрібно додати

    // Введення годин з перевіркою на допустимий діапазон (0-23)
    do {
        cout << "Введіть години (0-23): ";  // Запитуємо користувача ввести години
        cin >> time.hours;  // Зчитуємо годину з клавіатури
        if (time.hours < 0 || time.hours > 23) {  // Перевіряємо, чи введене значення годин в межах 0-23
            cout << "Невірне значення годин! Введіть число від 0 до 23." << endl;  // Виводимо помилку, якщо значення неправильне
        }
    } while (time.hours < 0 || time.hours > 23);  // Якщо введене значення годин некоректне, просимо ввести знову

    // Введення хвилин з перевіркою на допустимий діапазон (0-59)
    do {
        cout << "Введіть хвилини (0-59): ";  // Запитуємо користувача ввести хвилини
        cin >> time.minutes;  // Зчитуємо хвилини з клавіатури
        if (time.minutes < 0 || time.minutes > 59) {  // Перевіряємо, чи введене значення хвилин в межах 0-59
            cout << "Невірне значення хвилин! Введіть число від 0 до 59." << endl;  // Виводимо помилку, якщо значення неправильне
        }
    } while (time.minutes < 0 || time.minutes > 59);  // Якщо введене значення хвилин некоректне, просимо ввести знову

    // Запитуємо кількість хвилин для додавання
    cout << "Введіть кількість хвилин для додавання: ";  // Запитуємо кількість хвилин для додавання
    cin >> additionalMinutes;  // Зчитуємо кількість хвилин для додавання

    // Додаємо введену кількість хвилин до поточного часу
    time.minutes += additionalMinutes;  // Додаємо до хвилин кількість введених хвилин

    // Викликаємо функцію для коригування часу (якщо години або хвилини перевищують допустимі значення)
    correctTime(time);  // Коригуємо час, щоб години не перевищували 24, а хвилини - 60

    // Виводимо новий час у форматі ГГ:ХХ, якщо години або хвилини менше 10, додаємо нуль
    cout << "Нове значення часу: ";  // Виводимо текст "Нове значення часу:"
    cout << (time.hours < 10 ? "0" : "") << time.hours << ":"  // Якщо години менше 10, додаємо попередній нуль
         << (time.minutes < 10 ? "0" : "") << time.minutes << endl;  // Якщо хвилини менше 10, додаємо попередній нуль

    return 0;  // Завершення програми з кодом 0, що вказує на успішне виконання
}
