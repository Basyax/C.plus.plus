#include <iostream>  // Підключаємо бібліотеку для роботи з введенням і виведенням даних у консоль (використовуємо cout, endl)
#include <cstdlib>   // Підключаємо бібліотеку, яка містить функції rand() та srand() — для генерації випадкових чисел
#include <ctime>     // Підключаємо бібліотеку для роботи з часом — функція time() використовується для ініціалізації генератора випадкових чисел

using namespace std; // Використовуємо простір імен std, щоб не писати std:: перед cout, endl тощо

int main() { // Оголошуємо головну функцію програми — точку входу, з якої починається виконання коду

    srand(time(nullptr)); // Ініціалізуємо генератор випадкових чисел, передаючи поточний час (в секундах) як "зерно".
                          // Це гарантує, що при кожному запуску програми будуть різні випадкові числа.

    int rows = 3, cols = 3; // Оголошуємо та ініціалізуємо дві змінні: rows (рядки) та cols (стовпці), обидві дорівнюють 3.
                            // Це означає, що ми будемо створювати матрицю розміром 3x3.

    int** arr = new int*[rows]; // Створюємо динамічний масив покажчиків на int. Кожен елемент arr[i] буде вказувати на масив цілих чисел (рядок матриці).

    for (int i = 0; i < rows; i++) { // Запускаємо цикл, який проходить по кожному рядку майбутньої матриці (від 0 до 2)
        arr[i] = new int[cols]; // Для кожного рядка виділяємо пам'ять під масив з cols елементів (тобто, 3 цілих числа)
    }

    int evenCount = 0, oddCount = 0; // Оголошуємо і ініціалізуємо два лічильники:
                                     // evenCount — кількість парних чисел у матриці
                                     // oddCount — кількість непарних чисел

    cout << "Матриця:" << endl; // Виводимо заголовок перед тим, як показати значення елементів матриці

    for (int i = 0; i < rows; i++) { // Зовнішній цикл — проходить по кожному рядку матриці
        for (int j = 0; j < cols; j++) { // Внутрішній цикл — проходить по кожному елементу поточного рядка

            arr[i][j] = rand() % 100; // Генеруємо випадкове число в діапазоні [0, 99] і записуємо його у відповідну позицію матриці

            cout << arr[i][j] << " "; // Виводимо поточне число на екран з пробілом між елементами

            if (arr[i][j] % 2 == 0) // Перевіряємо, чи число парне (залишок від ділення на 2 дорівнює 0)
                evenCount++;        // Якщо парне — збільшуємо лічильник evenCount
            else
                oddCount++;         // Якщо непарне — збільшуємо лічильник oddCount
        }
        cout << endl; // Після виведення всіх елементів рядка переходимо на новий рядок
    }

    cout << "Головна діагональ: "; // Виводимо заголовок для елементів головної діагоналі
    for (int i = 0; i < rows; i++) { // Ітеруємо по індексах головної діагоналі (від 0 до 2)
        cout << arr[i][i] << " ";    // Виводимо елемент, де номер рядка дорівнює номеру стовпця (arr[0][0], arr[1][1], arr[2][2])
    }
    cout << endl; // Після діагоналі переходимо на новий рядок

    cout << "Побічна діагональ: "; // Виводимо заголовок для побічної (зворотної) діагоналі
    for (int i = 0; i < rows; i++) { // Ітеруємо по кожному рядку
        cout << arr[i][cols - i - 1] << " "; // Виводимо елемент побічної діагоналі (arr[0][2], arr[1][1], arr[2][0])
    }
    cout << endl; // Перехід на новий рядок після побічної діагоналі

    cout << "Кількість парних чисел: " << evenCount << endl; // Виводимо підраховану кількість парних чисел у матриці
    cout << "Кількість непарних чисел: " << oddCount << endl; // Виводимо підраховану кількість непарних чисел у матриці

    for (int i = 0; i < rows; i++) { // Цикл, який звільняє пам’ять, виділену для кожного рядка матриці
        delete[] arr[i]; // Видаляємо динамічно створений масив (рядок) за індексом i
    }
    delete[] arr; // Видаляємо сам масив покажчиків, тобто верхній рівень структури

    return 0; // Завершуємо виконання програми, повертаючи 0 — сигнал про успішне завершення
}
