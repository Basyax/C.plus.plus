#include <iostream> // Підключення бібліотеки для введення/виведення
#include <cstdlib>  // Підключення бібліотеки для роботи з випадковими числами
#include <ctime>    // Підключення бібліотеки для роботи з часом

using namespace std; // Використовуємо простір імен std, щоб не писати std:: кожен раз

int main() { // Початок головної функції програми
    srand(time(nullptr)); // Ініціалізація генератора випадкових чисел поточним часом

    int rows = 3, cols = 3; // Визначення розмірів двовимірного масиву
    
    int** arr = new int*[rows]; // Виділення пам'яті для масиву покажчиків
    for (int i = 0; i < rows; i++) { // Цикл для виділення пам'яті під кожен рядок
        arr[i] = new int[cols]; // Виділення пам'яті для кожного рядка
    }
    
    int evenCount = 0, oddCount = 0; // Оголошення лічильників парних і непарних чисел
    
    cout << "Матриця:" << endl; // Виведення заголовку матриці
    for (int i = 0; i < rows; i++) { // Цикл по рядках
        for (int j = 0; j < cols; j++) { // Цикл по стовпцях
            arr[i][j] = rand() % 100; // Генерація випадкового числа в діапазоні 0-99
            cout << arr[i][j] << " "; // Виведення значення елемента масиву
            
            if (arr[i][j] % 2 == 0) evenCount++; // Якщо число парне, збільшуємо лічильник парних
            else oddCount++; // Якщо число непарне, збільшуємо лічильник непарних
        }
        cout << endl; // Перехід на новий рядок після виведення рядка матриці
    }
    
    cout << "Головна діагональ: "; // Виведення заголовку головної діагоналі
    for (int i = 0; i < rows; i++) { // Цикл для виведення елементів головної діагоналі
        cout << arr[i][i] << " "; // Виведення елемента головної діагоналі
    }
    cout << endl; // Перехід на новий рядок
    
    cout << "Побічна діагональ: "; // Виведення заголовку побічної діагоналі
    for (int i = 0; i < rows; i++) { // Цикл для виведення елементів побічної діагоналі
        cout << arr[i][cols - i - 1] << " "; // Виведення елемента побічної діагоналі
    }
    cout << endl; // Перехід на новий рядок
    
    cout << "Кількість парних чисел: " << evenCount << endl; // Виведення кількості парних чисел
    cout << "Кількість непарних чисел: " << oddCount << endl; // Виведення кількості непарних чисел
    
    for (int i = 0; i < rows; i++) { // Цикл для звільнення пам'яті кожного рядка
        delete[] arr[i]; // Звільнення пам'яті рядка
    }
    delete[] arr; // Звільнення пам'яті масиву покажчиків
   
 
    return 0; // Завершення роботи програми
}
