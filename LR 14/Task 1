#include <iostream>  // Підключення стандартної бібліотеки для введення та виведення даних (використовується cin, cout)
#include <cstdlib>   // Підключення бібліотеки для використання функцій, пов’язаних з випадковими числами (наприклад, rand(), srand())
#include <ctime>     // Підключення бібліотеки для роботи з часом (використовується time() як "зерно" для генерації випадкових чисел)

using namespace std; // Директива, яка дозволяє використовувати імена з простору імен std без префіксу (наприклад, просто cout замість std::cout)

int main() { // Початок головної функції main(), з якої починається виконання програми
    srand(time(nullptr)); // Ініціалізація генератора випадкових чисел: time(nullptr) повертає поточний час у секундах, srand() використовує його як зерно

    int size = 10; // Оголошення змінної size, яка визначає кількість елементів у масиві (в даному випадку 10)

    double* arr = new double[size]; // Динамічне виділення пам’яті для масиву з 10 дійсних чисел типу double; arr — вказівник на початок цього масиву

    int positiveCount = 0, negativeCount = 0; // Оголошення двох змінних-лічильників, які будуть зберігати кількість додатних і від’ємних чисел відповідно

    // Початок циклу, який виконується від i = 0 до i < size (тобто 10 разів)
    for (int i = 0; i < size; i++) {
        // Генерація випадкового числа в діапазоні [-2.0; 2.0]
        // rand() повертає ціле число від 0 до RAND_MAX
        // static_cast<double>(rand()) перетворює це число у тип double
        // Ділення на RAND_MAX дає значення в межах [0.0; 1.0]
        // Множення на 4.0 дає діапазон [0.0; 4.0]
        // Віднімання 2.0 зсуває діапазон до [-2.0; 2.0]
        arr[i] = -2.0 + static_cast<double>(rand()) / RAND_MAX * 4.0;

        cout << arr[i] << " "; // Виведення згенерованого елемента масиву з пробілом

        if (arr[i] > 0) // Якщо елемент більше нуля (додатне число)
            positiveCount++; // Збільшити лічильник додатних чисел на 1
        else if (arr[i] < 0) // Інакше, якщо елемент менше нуля (від’ємне число)
            negativeCount++; // Збільшити лічильник від’ємних чисел на 1
        // Якщо arr[i] == 0, нічого не робиться (нульові значення не враховуються)
    }

    cout << "\nКількість додатних чисел: " << positiveCount << endl; // Виведення кількості додатних чисел після завершення циклу
    cout << "Кількість від'ємних чисел: " << negativeCount << endl; // Виведення кількості від’ємних чисел після завершення циклу

    delete[] arr; // Звільнення динамічно виділеної пам’яті під масив (щоб уникнути витоку пам’яті)

    return 0; // Повернення 0 з функції main() означає успішне завершення програми
}
