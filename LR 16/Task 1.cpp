#include <iostream> // Підключення бібліотеки для роботи з введенням/виведенням (наприклад, cout, cin)
#include <ctime>    // Підключення бібліотеки для роботи з датою і часом (функції time, localtime)

using namespace std; // Дозволяє не писати std:: перед кожним cout, cin, і т.д.

// Оголошення структури Date для збереження дати у вигляді трьох цілих чисел: рік, місяць, день
struct Date {
    int year;   // Рік
    int month;  // Місяць
    int day;    // День
};

// Функція визначає, чи є переданий рік високосним
bool isLeap(int year) {
    // Рік високосний, якщо він ділиться на 4, але не на 100, або ділиться на 400
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
}

// Функція повертає кількість днів у заданому місяці відповідного року
int monthLength(int year, int month) {
    // Якщо місяць лютий, перевіряємо, чи високосний рік
    if (month == 2) {
        return isLeap(year) ? 29 : 28; // 29 днів у високосному році, інакше 28
    }
    // Якщо місяць квітень, червень, вересень або листопад — 30 днів
    else if (month == 4 || month == 6 || month == 9 || month == 11) {
        return 30;
    }
    else {
        return 31; // В інших місяцях — 31 день
    }
}

// Функція отримує поточну дату з системного годинника
Date today(void) {
    time_t t = time(NULL); // Отримуємо поточний час у секундах з 1 січня 1970 року
    tm tl = *localtime(&t); // Перетворюємо час t у локальну структуру tm

    Date today_date; // Оголошення змінної типу Date для збереження поточної дати
    today_date.year = tl.tm_year + 1900; // tm_year містить роки від 1900, тому додаємо 1900
    today_date.month = tl.tm_mon + 1;    // tm_mon — номер місяця від 0 до 11, тому додаємо 1
    today_date.day = tl.tm_mday;         // tm_mday — номер дня в місяці (1–31)
    return today_date; // Повертаємо об'єкт поточної дати
}

// Функція обчислює кількість днів від 01.01.0001 до заданої дати
long long daysSinceBeginning(Date date) {
    long long days = 0; // Ініціалізація змінної для підрахунку днів

    // Додаємо кількість днів у повних роках до заданої дати (не включаючи поточний рік)
    for (int y = 1; y < date.year; ++y) {
        days += isLeap(y) ? 366 : 365; // Додаємо 366 або 365 в залежності від того, чи рік високосний
    }

    // Додаємо кількість днів у повних місяцях поточного року до заданого місяця
    for (int m = 1; m < date.month; ++m) {
        days += monthLength(date.year, m); // Викликаємо функцію для підрахунку днів у місяці
    }

    days += date.day; // Додаємо кількість днів поточного місяця (від початку до заданого дня)
    return days; // Повертаємо загальну кількість днів
}

// Основна функція програми
int main(void) {
    Date t = today(); // Отримуємо поточну дату, викликавши функцію today()
    cout << "Поточна дата: " << t.year << "-" << t.month << "-" << t.day << endl; 
    // Виводимо поточну дату у форматі РРРР-ММ-ДД

    int birthYear, birthMonth, birthDay; // Змінні для введення дати народження користувача
    cout << "Введіть рік народження: "; 
    cin >> birthYear; // Зчитування року народження з клавіатури
    cout << "Введіть місяць народження: "; 
    cin >> birthMonth; // Зчитування місяця народження
    cout << "Введіть день народження: ";   
    cin >> birthDay; // Зчитування дня народження

    Date birthday = {birthYear, birthMonth, birthDay}; // Створення об'єкта Date з введених даних

    long long daysBirthday = daysSinceBeginning(birthday); // Кількість днів від 01.01.0001 до дня народження
    long long daysToday = daysSinceBeginning(t); // Кількість днів від 01.01.0001 до поточної дати

    long long differenceInDays = daysToday - daysBirthday; // Різниця між днями — скільки днів пройшло

    cout << "Кількість днів, що пройшли від вашого дня народження до поточної дати: "
         << differenceInDays << " днів." << endl; 
    // Виведення результату

    return 0; // Повернення 0 означає успішне завершення програми
}
