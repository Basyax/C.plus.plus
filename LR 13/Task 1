#include <iostream>  // Підключаємо бібліотеку для роботи з ввідом і виводом (наприклад, cout, cin)
#include <cstdlib>   // Підключаємо бібліотеку для функцій rand() — генерація випадкових чисел, srand() — встановлення "зерна"
#include <ctime>     // Підключаємо бібліотеку для функції time(), яка повертає поточний час (використовується для ініціалізації rand)

using namespace std; // Щоб не писати std:: перед кожним cout, endl тощо

const int SIZE = 5;  // Оголошуємо константу, яка вказує розмірність квадратного масиву 5x5

int main() { // Початок основної функції програми
    int arr[SIZE][SIZE], evenCount = 0, oddCount = 0; 
    // Оголошуємо двовимірний масив 5x5 типу int (усього 25 елементів)
    // Створюємо змінні evenCount та oddCount для підрахунку кількості парних і непарних чисел

    srand(time(0)); 
    // Ініціалізуємо генератор випадкових чисел поточним часом
    // Це потрібно, щоб при кожному запуску програма генерувала різні випадкові числа

    // Початок циклу, який заповнює масив випадковими числами, виводить їх і рахує парні/непарні
    for (int *p = &arr[0][0]; p < &arr[0][0] + SIZE * SIZE; ++p) {
        // Створюємо вказівник p, який починає з адреси першого елемента масиву (arr[0][0])
        // Цикл працює, поки p не пройде всі 25 елементів (SIZE * SIZE)
        // ++p переходить до наступної комірки в пам’яті (одновимірне представлення 2D масиву)

        *p = rand() % 100; 
        // Генеруємо випадкове число від 0 до 99 і записуємо його в поточну комірку масиву

        cout << *p << " " 
             << ((p - &arr[0][0] + 1) % SIZE == 0 ? "\n" : ""); 
        // Виводимо число та пробіл
        // Якщо ми дійшли до кінця рядка (тобто кожні 5 чисел), виводимо перевід рядка
        // (p - &arr[0][0]) — це відстань у комірках від початку масиву
        // +1 — бо відлік у програмуванні з 0, а для перевірки треба 1–5–10–...
        // % SIZE == 0 — означає, що це кожний п’ятий елемент (кінець рядка)

        (*p % 2 == 0) ? ++evenCount : ++oddCount; 
        // Якщо число парне (залишок від ділення на 2 дорівнює 0), збільшуємо лічильник парних
        // Інакше — збільшуємо лічильник непарних
    }

    cout << "Головна діагональ: ";
    // Виводимо заголовок перед головною діагоналлю

    for (int i = 0; i < SIZE; ++i) 
        cout << *(*(arr + i) + i) << " "; 
    // Виводимо значення головної діагоналі (елементи arr[0][0], arr[1][1], ..., arr[4][4])
    // arr + i — вказівник на i-й рядок
    // *(arr + i) — сам i-й рядок
    // *(arr + i) + i — вказівник на i-й елемент у цьому рядку (тобто arr[i][i])
    // *(*(arr + i) + i) — значення цього елемента

    cout << "\nПобічна діагональ: ";
    // Виводимо заголовок перед побічною (другою) діагоналлю

    for (int i = 0; i < SIZE; ++i) 
        cout << *(*(arr + i) + (SIZE - 1 - i)) << " "; 
    // Виводимо значення побічної діагоналі (елементи arr[0][4], arr[1][3], ..., arr[4][0])
    // (SIZE - 1 - i) — індекс стовпчика, що зменшується у міру зростання i
    // Вказівник на arr[i][SIZE - 1 - i]

    cout << "\nКількість парних: " << evenCount 
         << ", непарних: " << oddCount << endl; 
    // Виводимо кількість знайдених парних і непарних чисел

    return 0; 
    // Повертаємо 0 — повідомляємо, що програма завершилась успішно
}
